{"EpubVersion":1,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2021-03-02 19:56:51","docid":0,"fillcolor":"ffffed99","id":4,"linecolor":"ffff0000","linewidth":2,"markups":[{"date":"2021-03-02 20:13:31","docid":0,"fillcolor":"ffffed99","id":5,"linecolor":"ffff0000","linewidth":2,"originaltext":"The primary goal of a DBMSis to provide a way to store and retrieve database information that is both convenientand efficient.","page":29,"textblocks":[{"first":[366.351318359375,250.59115600585938,6.41094970703125,12.51507568359375],"last":[171.29942321777344,276.6207580566406,2.5534210205078125,12.41644287109375],"length":128,"rects":[[366.351318359375,250.59115600585938,124.12652587890625,12.51507568359375],[119.81999969482422,263.5511779785156,370.64530181884766,12.51507568359375],[119.81999969482422,276.6207580566406,54.03284454345703,12.41644287109375]],"start":255,"text":"The primary goal of a DBMS\nis to provide a way to store and retrieve database information that is both convenient\nand efficient."}],"title":"Primary goal","type":5,"underline":true},{"content":"数据库最初是为了弥补file processing system的一些弊端： \nData redundancy and inconsistency数据冗余和不一致 \nDifficulty in accesing data数据获取困难 \nData isolation 数据孤立 \nIntegrity problems 完整性问题 \nAtomicity problem 原子性问题 \nConcurrent access并发访问 \nSecurity problem安全问题 \n  \nDatabase system正是设计出来解决这些问题的 ","date":"2021-03-02 20:22:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":6,"linecolor":"ffff0000","linewidth":2,"markups":[{"date":"2021-03-02 20:24:48","docid":0,"fillcolor":"ff59c6ff","id":7,"linewidth":2,"originaltext":"Data redundancy and inconsistency","page":34,"textblocks":[{"first":[107.81999969482422,63.39113998413086,7.704109191894531,12.515064239501953],"last":[255.18218994140625,63.39113998413086,4.46026611328125,12.515064239501953],"length":33,"rects":[[107.81999969482422,63.39113998413086,151.82245635986328,12.515064239501953]],"start":25,"text":"Data redundancy and inconsistency"}],"type":5},{"date":"2021-03-02 20:25:26","docid":0,"fillcolor":"ff59c6ff","id":8,"linewidth":2,"originaltext":"Difficulty in accessing data","page":34,"textblocks":[{"first":[107.81999969482422,224.79116821289062,7.704109191894531,12.515060424804688],"last":[221.28414916992188,224.79116821289062,4.986297607421875,12.515060424804688],"length":28,"rects":[[107.81999969482422,224.79116821289062,118.45044708251953,12.515060424804688]],"start":951,"text":"Difficulty in accessing data"}],"type":5},{"date":"2021-03-02 20:25:49","docid":0,"fillcolor":"ff59c6ff","id":9,"linewidth":2,"originaltext":"Data isolation.","page":34,"textblocks":[{"first":[107.81999969482422,437.9711608886719,7.704109191894531,12.51507568359375],"last":[167.8802490234375,437.9711608886719,2.5534210205078125,12.51507568359375],"length":15,"rects":[[107.81999969482422,437.9711608886719,62.613670349121094,12.51507568359375]],"start":2172,"text":"Data isolation."}],"type":5},{"date":"2021-03-02 20:25:53","docid":0,"fillcolor":"ff59c6ff","id":10,"linewidth":2,"originaltext":"Integrity problems.","page":34,"textblocks":[{"first":[107.81999969482422,482.7911682128906,3.791778564453125,12.51507568359375],"last":[185.27969360351562,482.7911682128906,2.5534210205078125,12.51507568359375],"length":19,"rects":[[107.81999969482422,482.7911682128906,80.01311492919922,12.51507568359375]],"start":2356,"text":"Integrity problems."}],"type":5},{"date":"2021-03-02 20:25:57","docid":0,"fillcolor":"ff59c6ff","id":11,"linewidth":2,"originaltext":"Atomicity problems","page":34,"textblocks":[{"first":[107.81999969482422,592.4111328125,6.783561706542969,12.51507568359375],"last":[185.70599365234375,592.4111328125,4.1643829345703125,12.51507568359375],"length":18,"rects":[[107.81999969482422,592.4111328125,82.05037689208984,12.51507568359375]],"start":3001,"text":"Atomicity problems"}],"type":5},{"date":"2021-03-02 20:26:07","docid":0,"fillcolor":"ff59c6ff","id":12,"linewidth":2,"originaltext":"Concurrent-access anomalies","page":35,"textblocks":[{"first":[139.25999450683594,172.951171875,7.1013641357421875,12.515060424804688],"last":[258.8304138183594,172.951171875,4.16436767578125,12.515060424804688],"length":27,"rects":[[139.25999450683594,172.951171875,123.73478698730469,12.515060424804688]],"start":687,"text":"Concurrent-access anomalies"}],"type":5},{"date":"2021-03-02 20:26:12","docid":0,"fillcolor":"ff59c6ff","id":13,"linewidth":2,"originaltext":"Security problems.","page":35,"textblocks":[{"first":[139.25999450683594,541.5911254882812,6.082183837890625,12.51507568359375],"last":[215.75970458984375,541.5911254882812,2.5534210205078125,12.51507568359375],"length":18,"rects":[[139.25999450683594,541.5911254882812,79.05313110351562,12.51507568359375]],"start":2868,"text":"Security problems."}],"type":5}],"originaltext":"1.2Purpose of Database Systems","page":33,"textblocks":[{"first":[72,234.59912109375,4.698394775390625,14.884231567382812],"last":[282.7067565917969,234.59912109375,5.23638916015625,14.884231567382812],"length":30,"rects":[[72,234.59912109375,215.94314575195312,14.884231567382812]],"start":863,"text":"1.2Purpose of Database Systems"}],"title":"1.2 Purpose of DS","type":5,"underline":true},{"annotations":[],"content":"抽象是控制复杂度的有效方法 \n抽象Abstraction可以屏蔽底层细节underlying details ","date":"2021-03-02 20:28:32","docid":0,"fillcolor":"ffffed99","id":14,"linecolor":"ffff0000","linewidth":2,"originaltext":"A major purpose of a database system is toprovide users with an abstract view of the data. That is, the system hides certain detailsof how the data are stored and maintained.","page":36,"textblocks":[{"first":[263.88787841796875,202.65118408203125,7.594512939453125,12.515060424804688],"last":[272.0159912109375,228.5711669921875,2.553436279296875,12.515060424804688],"length":176,"rects":[[263.88787841796875,202.65118408203125,195.08154296875,12.515060424804688],[88.37999725341797,215.61117553710938,370.64200592041016,12.515060424804688],[88.37999725341797,228.5711669921875,186.1894302368164,12.515060424804688]],"start":611,"text":"A major purpose of a database system is to\nprovide users with an abstract view of the data. That is, the system hides certain details\nof how the data are stored and maintained."}],"title":"Abstraction","type":5,"underline":true},{"content":"数据模型:描述数据、数据联系、数据语义及一致性约束的概念工具的集合，提供一种描述物理层、逻辑层及视图层数据库设计的方式。可以分为四类：Relational, E-R, object-based, semistructured","date":"2021-03-02 20:29:10","docid":0,"fillcolor":"ff59c6ff","folded":true,"id":15,"linewidth":2,"markups":[{"annotations":[{"content":"是最为常用的模型，在Relational Model中：\n行表示数据记录和实体\n列表示数据的属性或字段","style":0}],"content":"关系模型（relational model）：一种基于记录的模型，用表的集合来表示数据和数据间的联系，每个表有多个列，每列有唯一的列名。","date":"2021-03-02 20:30:34","docid":0,"fillcolor":"ff59c6ff","id":16,"linewidth":2,"originaltext":"Relational Model.","page":36,"textblocks":[{"first":[107.81999969482422,336.39117431640625,6.838356018066406,12.51507568359375],"last":[180.2397003173828,336.39117431640625,2.5534210205078125,12.51507568359375],"length":17,"rects":[[107.81999969482422,336.39117431640625,74.9731216430664,12.51507568359375]],"start":1127,"text":"Relational Model."}],"type":5},{"content":"实体-联系模型（entity-relationship model，a.k.a. E-R）：基于对现实世界的一种认识——现实世界由一组基本对象（实体）及这些对象间的联系构成。实体是现实世界中可区别于其他对象的一件事情或一个物体。（主要用于设计数据库） \nE-R提供一种方便的图形化方式来观察数据、联系和约束。 \n数据库中实体通过属性（attribute）集合来描述； \n联系（relationship）是几个实体之间的关联； \n同一类型的所有实体的集合称为实体集（entity set），同一类型的所有联系的集合称作联系集（relationship set）； ","date":"2021-03-02 20:31:13","docid":0,"fillcolor":"ff59c6ff","id":17,"linewidth":2,"originaltext":"Entity-Relationship Model.","page":36,"textblocks":[{"first":[107.81999969482422,471.8711853027344,6.619178771972656,12.51507568359375],"last":[218.8205108642578,471.8711853027344,2.5534210205078125,12.51507568359375],"length":26,"rects":[[107.81999969482422,471.8711853027344,113.5539321899414,12.51507568359375]],"start":1930,"text":"Entity-Relationship Model."}],"type":5},{"content":"半结构化数据模型（semistructured data model）：允许相同类型的数据项含有不同的属性集的数据定义。 例如XML","date":"2021-03-02 20:31:39","docid":0,"fillcolor":"ff59c6ff","id":18,"linewidth":2,"originaltext":"Semi-structured Data Model. ","page":36,"textblocks":[{"first":[107.81999969482422,542.6111450195312,6.082191467285156,12.51507568359375],"last":[231.5733642578125,542.6111450195312,3.087127685546875,12.51507568359375],"length":28,"rects":[[107.81999969482422,542.6111450195312,126.84049224853516,12.51507568359375]],"start":2291,"text":"Semi-structured Data Model. "}],"type":5},{"content":"基于对象的数据模型（object-based data model）：可看作E-R模型增加了封装、方法和对象标志等概念后的扩展。对象-关系数据模型结合了面向对象的数据模型和关系数据模型的特征。","date":"2021-03-02 20:31:59","docid":0,"fillcolor":"ff59c6ff","id":19,"linewidth":2,"originaltext":"Object-Based Data Model.","page":37,"textblocks":[{"first":[139.25999450683594,63.39113998413086,8.0986328125,12.515064239501953],"last":[249.00022888183594,63.39113998413086,2.5534210205078125,12.515064239501953],"length":24,"rects":[[139.25999450683594,63.39113998413086,112.29365539550781,12.515064239501953]],"start":19,"text":"Object-Based Data Model."}],"type":5}],"originaltext":"Data Models","page":36,"textblocks":[{"first":[117.56244659423828,252.9418487548828,6.814414978027344,12.403427124023438],"last":[172.9734344482422,252.9418487548828,4.363616943359375,12.403427124023438],"length":11,"rects":[[117.56244659423828,252.9418487548828,59.77460479736328,12.403427124023438]],"start":793,"text":"Data Models"}],"type":5},{"content":"从低到高分为三个层次：\nPhysical level, Logical level, View level","date":"2021-03-02 20:34:21","docid":0,"fillcolor":"fffeeb73","folded":true,"id":20,"linewidth":2,"markups":[{"content":"物理层（physical level）：详细描述复杂的底层数据结构，与数据库性能表现关系密切，不同数据库软件的物理层往往不同","date":"2021-03-02 20:35:36","docid":0,"fillcolor":"ff59c6ff","id":21,"linewidth":2,"originaltext":"Physical level","page":37,"textblocks":[{"first":[139.25999450683594,510.7511901855469,6.5643768310546875,12.515045166015625],"last":[193.2972412109375,510.7511901855469,2.728759765625,12.515045166015625],"length":14,"rects":[[139.25999450683594,510.7511901855469,56.76600646972656,12.515045166015625]],"start":2119,"text":"Physical level"}],"type":5},{"content":"逻辑层（logical level）：描述数据库中存储什么数据及这些数据间存在的关系。 \n物理层与逻辑层的关系类似于数据结构的物理结构和逻辑结构之间的关系 ","date":"2021-03-02 20:35:53","docid":0,"fillcolor":"ff59c6ff","folded":true,"id":22,"linewidth":2,"markups":[{"content":"物理数据独立性（physical data independence）：应用程序不依赖于物理模式，即使物理模式改变也无须重写应用程序，逻辑层用户不必知道逻辑层结构实现可能涉及的复杂物理层结构。 ","date":"2021-03-02 20:37:03","docid":0,"fillcolor":"ff59c6ff","id":23,"linewidth":2,"originaltext":"physical data indepen-","page":37,"textblocks":[{"first":[396.66046142578125,607.4111328125,5.0191650390625,12.51507568359375],"last":[488.3086853027344,607.4111328125,2.202728271484375,12.51507568359375],"length":22,"rects":[[396.66046142578125,607.4111328125,93.8509521484375,12.51507568359375]],"start":2763,"text":"physical data indepen-"}],"title":"Phsical data independece","type":5}],"originaltext":"Logical level.","page":37,"textblocks":[{"first":[139.25999450683594,542.6111450195312,6.3342437744140625,12.51507568359375],"last":[192.71971130371094,542.6111450195312,2.5534210205078125,12.51507568359375],"length":14,"rects":[[139.25999450683594,542.6111450195312,56.01313781738281,12.51507568359375]],"start":2287,"text":"Logical level."}],"type":5},{"content":"视图层（view level）：只描述数据库的某个部分，系统可以为同一数据库提供多个视图，使用户与系统交互更简单。 \n当数据库很大很复杂时，可以对不同用户提供不同的视图层（单个视图层描述数据库的一部分）从而让不同用户可以访问不同的数据集合，提高数据的安全性 ","date":"2021-03-02 20:37:33","docid":0,"fillcolor":"ff59c6ff","id":24,"linewidth":2,"originaltext":"View level.","page":38,"textblocks":[{"first":[107.81999969482422,490.2911682128906,6.827392578125,12.51507568359375],"last":[151.86053466796875,490.2911682128906,2.5534210205078125,12.51507568359375],"length":11,"rects":[[107.81999969482422,490.2911682128906,46.593955993652344,12.51507568359375]],"start":727,"text":"View level."}],"type":5}],"originaltext":"Data Abstraction","page":37,"textblocks":[{"first":[150.62734985351562,411.4618225097656,6.814422607421875,12.4034423828125],"last":[226.8661346435547,411.4618225097656,5.65875244140625,12.4034423828125],"length":16,"rects":[[150.62734985351562,411.4618225097656,81.89753723144531,12.4034423828125]],"start":1717,"text":"Data Abstraction"}],"title":"Data Abstraction Level","type":5},{"date":"2021-03-02 20:48:05","docid":0,"fillcolor":"fffeeb73","id":25,"linewidth":2,"markups":[{"content":"实例（instance）：特定时刻存储在数据库中的信息的集合称作数据的一个实例。","date":"2021-03-02 20:49:28","docid":0,"fillcolor":"ff59c6ff","id":26,"linewidth":2,"originaltext":"The collection ofinformation stored in the database at a particular moment is called an instance of thedatabase","page":40,"textblocks":[{"first":[384.4094543457031,432.0311584472656,6.41094970703125,12.51507568359375],"last":[121.42219543457031,457.9511413574219,4.734245300292969,12.51507568359375],"length":113,"rects":[[384.4094543457031,432.0311584472656,74.54458618164062,12.51507568359375],[88.37999725341797,444.9911804199219,370.61466217041016,12.51507568359375],[88.37999725341797,457.9511413574219,37.77644348144531,12.51507568359375]],"start":2290,"text":"The collection of\ninformation stored in the database at a particular moment is called an instance of the\ndatabase"}],"title":"Instance","type":5},{"content":"数据库模式（schema）：数据库的总体设计，即使发生变化，也不频繁。包括logical schema, physical schema和subschema，分别描述数据库三个层次结构的设计","date":"2021-03-02 20:50:25","docid":0,"fillcolor":"ffa0ec6e","id":27,"linewidth":2,"originaltext":"The overall design of the database is called the database schema.","page":40,"textblocks":[{"first":[132.09617614746094,457.9511413574219,6.41094970703125,12.51507568359375],"last":[414.6604309082031,457.9511413574219,2.553436279296875,12.51507568359375],"length":65,"rects":[[132.09617614746094,457.9511413574219,285.11769104003906,12.51507568359375]],"start":2405,"text":"The overall design of the database is called the database schema."}],"title":"Schema","type":5}],"originaltext":"Instances and Schemas","page":40,"textblocks":[{"first":[120.1387710571289,412.9618225097656,3.3374710083007812,12.4034423828125],"last":[226.20458984375,412.9618225097656,4.363616943359375,12.4034423828125],"length":21,"rects":[[120.1387710571289,412.9618225097656,110.42943572998047,12.4034423828125]],"start":2201,"text":"Instances and Schemas"}],"type":5},{"content":"\n数据库语言包括Data definition language and data manuplation language，即数据库定义语言DDL和数据库操纵语言DML \n  \n","date":"2021-03-02 20:52:15","docid":0,"fillcolor":"fffeeb73","id":28,"linewidth":2,"markups":[{"content":"  \n数据库定义语言（DDL）：用于表达说明数据库模式的一系列定义（定义数据库模式），也可用于定义数据的其他特征。 \n数据存储和定义（data storage and definition）语言：一系列特殊的DDL语句，用于说明数据库系统所使用的存储结构和访问方式，定义了数据库模式的实现细节。 \nDDL以指令（语句）作为输入，生成输出放在数据字典（data dictionary）中。数据字典包含元数据（metadata：用以描述数据库中的数据）。数据字典可以看做一种特殊的表，只能由数据库系统本身来访问和修改，在读取和修改实际数据前数据系统要先参考数据字典。 \n  \n存储在数据库中的数据值必须满足某些一致性约束（consistency constraint），DDL语言提供指定这种约束的工具，每当数据库更新时数据库系统都会检查这些约束。 \n·域约束（domain constraint）：每个属性都对应于一个所有可能的取值构成的域。 \n·参照完整性（referential integrity）：一个关系中给定属性集上的取值也在另一关系的某一属性集的取值中出现。 \n·断言（assertion）：数据库需要时刻满足某一条件。断言创建后系统会监测其有效性，如果断言有效，则以后只有不破坏断言的数据库更新才被允许。 \n·授权（authorization）：对于不同用户在数据库中的不同数据值上允许不同的访问类型，这些区别以授权来表达。如：a. 读权限（read authorization）允许读取数据但不能修改数据；b. 插入权限（insert authorization）允许插入新数据但不允许修改已有数据；更新权限（update authorization）允许修改但不能删除数据；删除权限（delete authorization）允许删除数据。 ","date":"2021-03-02 20:53:42","docid":0,"fillcolor":"ff59c6ff","id":29,"linewidth":2,"originaltext":"Data-Definition Language","page":41,"textblocks":[{"first":[149.91900634765625,368.80181884765625,6.814422607421875,12.4034423828125],"last":[267.23260498046875,368.80181884765625,5.828125,12.4034423828125],"length":24,"rects":[[149.91900634765625,368.80181884765625,123.1417236328125,12.4034423828125]],"start":1597,"text":"Data-Definition Language"}],"title":"DDL","type":5}],"originaltext":"Database Languages","page":41,"textblocks":[{"first":[119.8196029663086,252.9591064453125,8.177360534667969,14.88421630859375],"last":[233.8662109375,252.9591064453125,5.2363739013671875,14.88421630859375],"length":18,"rects":[[119.8196029663086,252.9591064453125,119.2829818725586,14.88421630859375]],"start":1078,"text":"Database Languages"}],"type":5}],"originaltext":"Introduction","page":29,"textblocks":[{"first":[71.4000015258789,150.75485229492188,8.677436828613281,32.01585388183594],"last":[210.14576721191406,150.75485229492188,14.712783813476562,32.01585388183594],"length":12,"rects":[[71.4000015258789,150.75485229492188,153.45854949951172,32.01585388183594]],"start":16,"text":"Introduction"}],"title":"Chap1","type":5,"underline":true}],"maxid":31,"title":"Database System Concepts 7th Edition-2019","unimportant":[{"date":"2021-03-02 20:58:12","docid":0,"fillcolor":"ffffed99","id":31,"linecolor":"ffff0000","linewidth":2,"originaltext":"a set of statements in a special type of DDL called a data storage and definitionlanguage. These statements define the implementation details of the database schemas,which are usually hidden from the users.","page":41,"parid":-1,"paridx":-1,"textblocks":[{"first":[133.73928833007812,439.7111511230469,4.865753173828125,12.51507568359375],"last":[292.63702392578125,465.63116455078125,2.553436279296875,12.51507568359375],"length":208,"rects":[[133.73928833007812,439.7111511230469,356.6816101074219,12.51507568359375],[119.8194808959961,452.6711730957031,370.57852935791016,12.51507568359375],[119.8194808959961,465.63116455078125,175.37097930908203,12.51507568359375]],"start":1898,"text":"a set of statements in a special type of DDL called a data storage and definition\nlanguage. These statements define the implementation details of the database schemas,\nwhich are usually hidden from the users."}],"type":5,"underline":true}]}